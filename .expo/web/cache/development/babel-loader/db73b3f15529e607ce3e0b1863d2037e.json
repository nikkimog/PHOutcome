{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport qs from \"qs\";\nexport function sendEmail(to, subject, body) {\n  var options,\n      cc,\n      bcc,\n      url,\n      query,\n      canOpen,\n      _args = arguments;\n  return _regeneratorRuntime.async(function sendEmail$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n          cc = options.cc, bcc = options.bcc;\n          url = \"mailto:\" + to;\n          query = qs.stringify({\n            subject: subject,\n            body: body,\n            cc: cc,\n            bcc: bcc\n          });\n\n          if (query.length) {\n            url += \"?\" + query;\n          }\n\n          console.log(\"url\", url);\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(Linking.canOpenURL(url));\n\n        case 8:\n          canOpen = _context.sent;\n\n          if (canOpen) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"Provided URL can not be handled\");\n\n        case 11:\n          return _context.abrupt(\"return\", Linking.openURL(url));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/nicolemogensen/PHOutcomes/src/screens/sendEmail.js"],"names":["qs","sendEmail","to","subject","body","options","cc","bcc","url","query","stringify","length","console","log","Linking","canOpenURL","canOpen","Error","openURL"],"mappings":";AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,OAAO,SAAeC,SAAf,CAAyBC,EAAzB,EAA6BC,OAA7B,EAAsCC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4CC,UAAAA,OAA5C,2DAAsD,EAAtD;AACEC,UAAAA,EADF,GACcD,OADd,CACEC,EADF,EACMC,GADN,GACcF,OADd,CACME,GADN;AAGFC,UAAAA,GAHE,eAGcN,EAHd;AAMAO,UAAAA,KANA,GAMQT,EAAE,CAACU,SAAH,CAAa;AAC1BP,YAAAA,OAAO,EAAEA,OADiB;AAE1BC,YAAAA,IAAI,EAAEA,IAFoB;AAG1BE,YAAAA,EAAE,EAAEA,EAHsB;AAI1BC,YAAAA,GAAG,EAAEA;AAJqB,WAAb,CANR;;AAaN,cAAIE,KAAK,CAACE,MAAV,EAAkB;AACjBH,YAAAA,GAAG,UAAQC,KAAX;AACA;;AACDG,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,GAAnB;AAhBM;AAAA,2CAmBgBM,OAAO,CAACC,UAAR,CAAmBP,GAAnB,CAnBhB;;AAAA;AAmBAQ,UAAAA,OAnBA;;AAAA,cAqBDA,OArBC;AAAA;AAAA;AAAA;;AAAA,gBAsBC,IAAIC,KAAJ,CAAU,iCAAV,CAtBD;;AAAA;AAAA,2CAyBCH,OAAO,CAACI,OAAR,CAAgBV,GAAhB,CAzBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import qs from \"qs\";\n\nexport async function sendEmail(to, subject, body, options = {}) {\n\tconst { cc, bcc } = options;\n\n\tlet url = `mailto:${to}`;\n\n\t// Create email link query\n\tconst query = qs.stringify({\n\t\tsubject: subject,\n\t\tbody: body,\n\t\tcc: cc,\n\t\tbcc: bcc,\n\t});\n\n\tif (query.length) {\n\t\turl += `?${query}`;\n\t}\n\tconsole.log(\"url\", url);\n\n\t// check if we can use this link\n\tconst canOpen = await Linking.canOpenURL(url);\n\n\tif (!canOpen) {\n\t\tthrow new Error(\"Provided URL can not be handled\");\n\t}\n\n\treturn Linking.openURL(url);\n}\n"]},"metadata":{},"sourceType":"module"}